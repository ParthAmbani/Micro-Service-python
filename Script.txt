# =========================
# MySQL Database Setup
# =========================

# Load the database from a SQL file
mysql -u root -p < /path/to/auth_database.sql

# Verify the database is created
SHOW DATABASES;

# Select the 'auth' database and check its contents
USE auth;
SHOW TABLES;

# Example: View all users in the 'user' table
SELECT * FROM user;

# =========================
# Python Virtual Environment
# =========================

# Create a Python virtual environment
python -m venv env_name

# Activate the virtual environment (Windows)
env_name\Scripts\activate

# Activate the virtual environment (macOS/Linux)
source env_name/bin/activate

# Install necessary packages
pip install package_name

# Save dependencies to requirements.txt
pip freeze > requirements.txt

# Install dependencies from requirements.txt
pip install -r requirements.txt

# =========================
# Minikube Setup
# =========================

# Start Minikube (requires admin privileges)
minikube start

# Enable ingress addon in Minikube
minikube addons enable ingress

# Run Minikube tunnel to expose LoadBalancer services locally
minikube tunnel

# =========================
# Kubernetes Management
# =========================

# Apply Kubernetes configuration files
kubectl apply -f ./

# Delete resources defined in the configuration files
kubectl delete -f ./

# Scale down a deployment to zero replicas
kubectl scale deployment gateway --replicas=0

# Delete a specific ingress resource
kubectl delete ingress gateway-ingress -n default

# List all pods in the cluster
kubectl get pods

# Get detailed information about a specific pod
kubectl describe pod <pod-name> # Example: rabbirmq-0

# Check the status of a StatefulSet
kubectl get statefulset <statefulset-name> # Example: rabbirmq

# Describe a StatefulSet in detail
kubectl describe statefulset <statefulset-name> # Example: rabbirmq

# =========================
# Docker Commands
# =========================

# Build a Docker image from the current directory
docker build -t <image-name>:<tag> .

# Tag an existing image for a repository
docker tag <source-image-id> <repository>:<tag>
# Example:
docker tag 2c4d1a1fe8b1494eea3521f297e02bbd543ce1ea549061df2c554488f678eba1 parthambani/gateway:latest

# Push an image to a Docker repository
docker push <repository>:<tag>
# Example:
docker push parthambani/gateway:latest

# =========================
# Debugging Commands
# =========================

# Get the list of pods and check logs of a specific pod
kubectl get pods
kubectl logs <pod-name> # Example: gateway-5fdd5d479f-4ng4v

# =========================
# NGINX Ingress Setup
# =========================

# 1. Install the NGINX Ingress Controller
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

# 2. Verify the NGINX Ingress Controller installation
kubectl get pods -n ingress-nginx

# Example Output:
# NAME                                        READY   STATUS    RESTARTS   AGE
# ingress-nginx-controller-XXXXX              1/1     Running   0          2m

# 3. Check the ingress controller's service details
kubectl get svc -n ingress-nginx

# Example Output:
# NAME                       TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
# ingress-nginx-controller   LoadBalancer   10.96.170.236    <pending>     80:30619/TCP,443:32150/TCP   3m

# =========================
# Host Configuration (Example)
# =========================

# Add entries to /etc/hosts for local testing
127.0.1.1 mp3converter.com
127.0.1.1 rabbitmq-management.com
192.168.49.2 mp3converter.com
192.168.49.2 rabbitmq-management.com

# =========================
# MySQL User Configuration
# =========================

# Create a new MySQL user with specific permissions
CREATE USER 'auth_user'@'192.168.49.2' IDENTIFIED BY 'Auth123';
GRANT ALL PRIVILEGES ON *.* TO 'auth_user'@'192.168.49.2';
FLUSH PRIVILEGES;

# Example: Grant privileges with admin user
GRANT ALL PRIVILEGES ON *.* TO 'auth_user'@'192.168.49.2' IDENTIFIED BY 'admin';
FLUSH PRIVILEGES;

# =========================
# Example: Docker Workflow
# =========================

# Tag and push a Docker image
docker tag 5054641e1ae27eb30774031add39f827e26e7bd3f3f369225a510435583671ea parthambani/converter:latest
docker push parthambani/converter:latest

# Build a Docker image for the gateway
docker build -t parthambani/gateway:<tag-name> .

# =========================
# Curl Command Example
# =========================

# Test an API endpoint with a POST request
curl -X POST http://mp3converter.com/login -u admin@email.com:admin23
